#ifndef __SET__
#define __SET__

#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<string.h>

#define DEFAULT_SET_SIZE 128 //стандартное количество элементов, под которые выделяется память 


typedef struct Set
{
    void** arr;                    //массив элементов

    size_t size;                   //количество элементов, под которые выделена память
    size_t len;                    //количество проинициализированных элементов
    int(*cmp)(const void* el_1,const void* el_2); //функция сравнения, задаваемая пользователем

    size_t _sizeof;                //размер памяти, занимаемой одним елементом
}Set;


//Описание номеров ошибок для функции Error
typedef enum
{
    MEMORY_0,
    MEMORY_1,
    OUT_OF_ARR
} Er_Enum;

//по заданной функции сравнения и размеру одного элемента создаёт упорядоченное множество
/*Функция сравнения возвращает 0, если элементы равны
                               1, если первый елемент больше второго
                              -1, если второй елемент больше первого*/
Set* Create_Set(int(*compare)(const void* el_1,const void* el_2), size_t _sizeof);

//удаляет структуру, очищает память
void Distruct_Set(Set* set); 

/*добавляет элемент в множество. 
Возвращает 1, если такого элемента не было в структуре и 0, если был*/
int Add(void* Data, Set* set);

/*из упорядоченного массива данных достаёт элемент по его индексу.
Возвращает указатель void* на элемент, соответствующий индексу
Внимание! Во избежиние утечек памяти указатель, возвращаемый функцией должен быть очищен функцией free после использования
возврвщает ошибку и останавливает пограмму, если индекс выходит за пределы проинициализированной части массива*/
void* get(int index, Set* set);

/*возвращает кличество элементов в множестве*/
size_t get_len(Set* set);

/*удаляет элемент из множества.
Возвращает 1, если элемент был успешно удалён или 0, если такого элемента не оказалось в массиве*/
int Remove(void* Data, Set* set);

/*проверяет, есть ли элемент Data в множестве set
Возвращает номер элемента в массиве set->arr, если элемент есть в множестве
И -1 -- если нет*/
int Find(void* Data, Set* set);


//$$СЛУЖБНЫЕ ФУНКЦИИ

/*по функции сравнения сортирует элементы*/
void _sort(Set* set);

/*осуществляет поиск в отсортированном массиве элементов,
возвращает номер элемента, если элемент  был найден и -1 - если не был найден*/
int _search(void* Data, Set* set);

/* Проверяет структуру Set */
void Set_Assert(Set* set);

//функция для отладки
void print_int_set(Set* set);


//функция для работы с ошибками
void Error(Er_Enum Err);

#endif
